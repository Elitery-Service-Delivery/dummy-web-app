name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="fastfetch-server"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          OUTPUT_NAME="${BINARY_NAME}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          
          go build -a -ldflags '-extldflags "-static"' -o "$OUTPUT_NAME" main.go
          
          # Create tarball/zip for release
          if [ "$GOOS" = "windows" ]; then
            zip "${OUTPUT_NAME%.exe}.zip" "$OUTPUT_NAME"
          else
            tar -czf "${OUTPUT_NAME}.tar.gz" "$OUTPUT_NAME"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            fastfetch-server-*
            *.tar.gz
            *.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          find ./artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} ./release-assets/
          ls -la ./release-assets

      - name: Determine tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: FastFetch Server ${{ steps.tag.outputs.tag }}
          body: |
            ## FastFetch Web Server Release ${{ steps.tag.outputs.tag }}
            
            A simple Go web server that serves system information via fastfetch on port 3131.
            
            ### Features:
            - ‚ö° Serves fastfetch output on GET /
            - üöÄ Built with Go for performance
            - üíæ 1-minute caching to reduce system load
            - üåê Clean HTML interface
            
            ### Usage:
            1. Download the appropriate binary for your system
            2. Make it executable: `chmod +x fastfetch-server-*`
            3. Run: `./fastfetch-server-*`
            4. Visit: http://localhost:3131
            
            ### Available Binaries:
            - **Linux AMD64**: `fastfetch-server-linux-amd64.tar.gz`
            - **Linux ARM64**: `fastfetch-server-linux-arm64.tar.gz`
            - **macOS AMD64**: `fastfetch-server-darwin-amd64.tar.gz`
            - **macOS ARM64**: `fastfetch-server-darwin-arm64.tar.gz`
            - **Windows AMD64**: `fastfetch-server-windows-amd64.zip`
            
            **Note**: Make sure `fastfetch` is installed on your system for the server to work properly.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in ./release-assets/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload ${{ steps.tag.outputs.tag }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}